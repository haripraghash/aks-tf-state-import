name: 'Deploy state migration AKS infra'
on:
  push:
    branches:
    - master
  pull_request:
    branches: [ master ]
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'     
        required: true
        default: 'verbose'

permissions:
      id-token: write
      contents: read
jobs:
  terraform:
    name: 'Terraform'
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_AD_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_AD_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_AD_TENANT_ID }}
    runs-on: ubuntu-latest
    environment: dev
 
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: "./"
 
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2
    
    - uses: hashicorp/setup-terraform@v1.3.2
      with:
        terraform_version: "=1.1.3"
        terraform_wrapper: false
    
    - name: Terraform fmt
      id: fmt
      run: terraform fmt -check
      continue-on-error: false

    - name: 'Az CLI login'
      uses: azure/login@v1
      with:
          client-id: ${{ secrets.GH_AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.GH_AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.GH_AZURE_SUBSCRIPTION_ID }}

    - name: Terraform Init - Source state
      id: init
      run: |
       cd ..
       mkdir oldstate
       ls -la
       cp -r ./aks-tf-state-import/* ./oldstate
       cd ./oldstate
       ls -la
       terraform init -input=false -backend-config='storage_account_name=${{ secrets.STORAGE_ACCOUNT_NAME}}' -backend-config='container_name=dev-tfstate' -backend-config='key=aks.dev.tfstate' 
       terraform state list
       ls
      #-backend-config='access_key=${{ secrets.ACCESS_KEY}}'

    # - name: Terraform Validate
    #   id: validate
    #   run: terraform validate

    # - name: Terraform Plan
    #   id: plan
    #   run: terraform plan -no-color
    #   continue-on-error: false

    # - uses: actions/github-script@0.9.0
    #   if: github.event_name == 'pull_request'
    #   env:
    #     PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
    #   with:
    #     github-token: ${{ secrets.GITHUB_TOKEN }}
    #     script: |
    #       const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
    #       #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
    #       #### Terraform Validation ü§ñ\`${{ steps.validate.outputs.stdout }}\`
    #       #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
          
    #       <details><summary>Show Plan</summary>
          
    #       \`\`\`\n
    #       ${process.env.PLAN}
    #       \`\`\`
          
    #       </details>
          
    #       *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
            
    #       github.issues.createComment({
    #         issue_number: context.issue.number,
    #         owner: context.repo.owner,
    #         repo: context.repo.repo,
    #         body: output
    #       })
 
    # - name: Terraform Apply
    #   if: (github.ref == 'refs/heads/master' && github.event_name == 'push') || github.event_name == 'workflow_dispatch'
    #   id: apply
    #   run: terraform apply --auto-approve
    #   continue-on-error: false
